/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/anthonyaragues/Documents/lab/web3d/public/models/r3f_animate2.glb -o /Users/anthonyaragues/Documents/lab/web3d/models/r3f_animate2.js -p 3 
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

const playAction = function(strAction, intTimeScale){
  //animationGroups[strGroup].forEach(function(strAction){
    const action = actions[strAction]
    action.clampWhenFinished = true
    action.timeScale = intTimeScale
    action.setLoop(1,1).reset().play()
  //});
  if(intTimeScale === 1 ){
    setTimeout(function(){
    playAction(strGroup, -1);
    }, 3000);
  }
}  

useEffect(() => {
  console.log('actions', actions);
}, [actions]);

export function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('models/r3f_animate2.glb')
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="Cube" geometry={nodes.Cube.geometry} material={nodes.Cube.material} onClick={()=>{playAction('rotate_1',1)}}>
          <mesh name="knob" geometry={nodes.knob.geometry} material={materials.sy_dark_matte} position={[0.429, 0.429, 0.429]} rotation={[1.107, 0.421, -0.685]} onClick={()=>{playAction('rotate_2',1)}}/>
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('models/r3f_animate2.glb')
